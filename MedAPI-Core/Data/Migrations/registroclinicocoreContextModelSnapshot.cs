// <auto-generated />
using System;
using Data.DataModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(registroclinicocoreContext))]
    partial class registroclinicocoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.DataModels.cardiovascularnote", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("auscultationSite")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("capillaryRefillLLM")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("capillaryRefillLRM")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("cardiacPressureIntensity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("cardiacPressureRhythm")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("diastolicPhase")
                        .HasColumnType("bit");

                    b.Property<bool>("edemaAnkle")
                        .HasColumnType("bit");

                    b.Property<bool>("edemaGeneralized")
                        .HasColumnType("bit");

                    b.Property<bool>("edemaLowerMembers")
                        .HasColumnType("bit");

                    b.Property<bool>("fourthNoise")
                        .HasColumnType("bit");

                    b.Property<string>("gastrointestinalSemiology")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("murmurs")
                        .HasColumnType("bit");

                    b.Property<bool>("neckRadiation")
                        .HasColumnType("bit");

                    b.Property<long?>("note_id")
                        .HasColumnType("bigint");

                    b.Property<string>("otherSymptoms")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("pedalPulsesL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("pedalPulsesR")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("pulsesLLM")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("pulsesLRM")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("radialPulsesL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("radialPulsesR")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("systolicPhase")
                        .HasColumnType("bit");

                    b.Property<bool>("thirdNoise")
                        .HasColumnType("bit");

                    b.Property<bool>("trophicChanges")
                        .HasColumnType("bit");

                    b.Property<string>("vesicularWhisperL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("vesicularWhisperR")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("note_id");

                    b.ToTable("cardiovascularnote", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.cardiovascularnote_cardiovascularsymptom", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("cardiovascularNote_id")
                        .HasColumnType("bigint");

                    b.Property<string>("cardiovascularSymptoms")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("cardiovascularNote_id");

                    b.ToTable("cardiovascularnote_cardiovascularsymptoms", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.chapter", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("chapter", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.country", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "name" }, "country$UK_t81fgsgaq5hcgbixtau1ptk3")
                        .IsUnique();

                    b.ToTable("country", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.department", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("country_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.HasIndex(new[] { "name" }, "department$UK_biw7tevwc07g3iutlbmkes0cm")
                        .IsUnique();

                    b.ToTable("department", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.diagnosis", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("chapter_id")
                        .HasColumnType("bigint");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("chapter_id");

                    b.ToTable("diagnosis", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.district", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("province_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ubigeo")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("province_id");

                    b.ToTable("district", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.establishment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("deleted")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("binary(1)")
                        .IsFixedLength(true);

                    b.Property<string>("establishmentType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("initials")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "name" }, "establishment$UK_odanp3w4u1swk7mhgmv7rvxq0")
                        .IsUnique();

                    b.ToTable("establishment", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.exam", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("exam", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.lab", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreezed")
                        .HasColumnType("bit");

                    b.Property<string>("labName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("parentCompany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("ruc")
                        .HasColumnType("bigint");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("lab", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.lab_upload_result", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dateUploaded")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("fileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("fileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("lab_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("medic_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("lab_id");

                    b.HasIndex("medic_user_id");

                    b.HasIndex("user_id");

                    b.ToTable("lab_upload_result", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.medic", b =>
                {
                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreezed")
                        .HasColumnType("bit");

                    b.Property<string>("cmp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("rne")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("medic", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.medic_specialty", b =>
                {
                    b.Property<long>("Medic_id")
                        .HasColumnType("bigint");

                    b.Property<string>("specialties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Medic_id");

                    b.ToTable("medic_specialties", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.medicine", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("concentration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("form")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("fractions")
                        .HasColumnType("bigint");

                    b.Property<string>("healthRegistration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("owner")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("presentation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("medicine", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.note", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("age")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("attached_attention")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("completed")
                        .HasColumnType("bit");

                    b.Property<bool>("control")
                        .HasColumnType("bit");

                    b.Property<string>("createdBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("date");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("establishment_id")
                        .HasColumnType("bigint");

                    b.Property<string>("exam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isSignatureDraw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("medic_id")
                        .HasColumnType("bigint");

                    b.Property<string>("modifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.Property<string>("physicalExam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prognosis")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("secondOpinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("sicknessTime")
                        .HasColumnType("bigint");

                    b.Property<string>("sicknessUnit")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("signatuteDraw")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("signatuteText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("specialty")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("stage")
                        .HasColumnType("bigint");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'open')");

                    b.Property<string>("story")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symptom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ticket_id")
                        .HasColumnType("bigint");

                    b.Property<string>("treatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("triage_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("establishment_id");

                    b.HasIndex("medic_id");

                    b.HasIndex("patient_id");

                    b.HasIndex("ticket_id");

                    b.HasIndex("triage_id");

                    b.HasIndex("user_id");

                    b.ToTable("note", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.notediagnosis", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("diagnosisType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("diagnosis_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("note_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("diagnosis_id");

                    b.HasIndex("note_id");

                    b.ToTable("notediagnosis", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.noteexam", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<long>("exam_id")
                        .HasColumnType("bigint");

                    b.Property<long>("note_id")
                        .HasColumnType("bigint");

                    b.Property<string>("observation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("specification")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("exam_id");

                    b.HasIndex("note_id");

                    b.ToTable("noteexam", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.noteexam_upload", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("noteExam_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("uploads_id")
                        .HasColumnType("bigint");

                    b.HasKey("id")
                        .IsClustered(false);

                    b.HasIndex("noteExam_id");

                    b.HasIndex(new[] { "uploads_id" }, "noteexam_upload$UK_ff7t6g8kbapqe17vt5yjio5da")
                        .IsUnique()
                        .IsClustered();

                    b.ToTable("noteexam_upload", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.notemedicine", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("durationTime")
                        .HasColumnType("bigint");

                    b.Property<string>("durationUnit")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("frequencyTime")
                        .HasColumnType("bigint");

                    b.Property<string>("frequencyUnit")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("indication")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("medicine_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("note_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("medicine_id");

                    b.HasIndex("note_id");

                    b.ToTable("notemedicine", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.notereferral", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("note_id")
                        .HasColumnType("bigint");

                    b.Property<string>("reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("specialty")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("note_id");

                    b.ToTable("notereferral", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.nurse", b =>
                {
                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<string>("medicRegistration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("nurse", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.nurse_specialty", b =>
                {
                    b.Property<long>("Nurse_id")
                        .HasColumnType("bigint");

                    b.Property<string>("specialties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("Nurse_id");

                    b.ToTable("nurse_specialties", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("alcohol")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("bloodType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("cigaretteNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("createdTicket")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("departmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dormNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("educationalAttainment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("electricity")
                        .HasColumnType("bit");

                    b.Property<long?>("fractureNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("fruitsVegetables")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("highGlucose")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("homeMaterial")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("homeOwnership")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("homeType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("occupation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("otherAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("otherFatherBackground")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("otherMedicines")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("otherMotherBackground")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("otherPersonalBackground")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("physicalActivity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("race")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("residentNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("sewage")
                        .HasColumnType("bit");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("water")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("departmentId");

                    b.HasIndex("user_id");

                    b.ToTable("patient", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_allergy", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("allergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("patient_id");

                    b.ToTable("patient_allergies", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_fatherbackground", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("fatherBackgrounds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("patient_id");

                    b.ToTable("patient_fatherbackgrounds", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_medic_permission", b =>
                {
                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.Property<long>("medic_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("is_future_request_blocked")
                        .HasColumnType("bit");

                    b.Property<bool>("is_medic_authorized")
                        .HasColumnType("bit");

                    b.Property<bool>("is_request_sent")
                        .HasColumnType("bit");

                    b.HasKey("patient_id", "medic_id")
                        .HasName("pk_patient_medic");

                    b.HasIndex("medic_id");

                    b.ToTable("patient_medic_permission", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_medicine", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("medicines")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("patient_id");

                    b.ToTable("patient_medicines", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_motherbackground", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("motherBackgrounds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("patient_id");

                    b.ToTable("patient_motherbackgrounds", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_personalbackground", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.Property<string>("personalBackgrounds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("patient_id");

                    b.ToTable("patient_personalbackgrounds", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.patient_symptom", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("custom_symptom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("patient_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("symptoms_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("patient_id");

                    b.HasIndex("symptoms_id");

                    b.ToTable("patient_symptoms", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.province", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("department_id");

                    b.HasIndex(new[] { "name" }, "province$UK_moejme3ohebd07k2d4b70l8vh")
                        .IsUnique();

                    b.ToTable("province", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("role", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.role_permission", b =>
                {
                    b.Property<long>("Role_id")
                        .HasColumnType("bigint");

                    b.Property<string>("permissions")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("Role_id");

                    b.ToTable("role_permissions", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.speciality", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("specialities", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.symptom", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "name" }, "symptom$UK_t81fgsgaq5hcgbixtau1ptk3")
                        .IsUnique();

                    b.ToTable("symptoms", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.ticket", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("closed")
                        .HasColumnType("bit");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("nroTicket")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("serie")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("ticket", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.triage", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("abdominalPerimeter")
                        .HasColumnType("float");

                    b.Property<double?>("bmi")
                        .HasColumnType("float");

                    b.Property<double?>("breathingRate")
                        .HasColumnType("float");

                    b.Property<string>("createdBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("date");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("deposition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("diastolicBloodPressure")
                        .HasColumnType("float");

                    b.Property<double?>("glycemia")
                        .HasColumnType("float");

                    b.Property<double?>("hdlCholesterol")
                        .HasColumnType("float");

                    b.Property<double?>("heartRate")
                        .HasColumnType("float");

                    b.Property<double?>("heartRisk")
                        .HasColumnType("float");

                    b.Property<string>("hunger")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("hypertensionRisk")
                        .HasColumnType("float");

                    b.Property<double?>("ldlCholesterol")
                        .HasColumnType("float");

                    b.Property<string>("modifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("date");

                    b.Property<long?>("patient_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("saturation")
                        .HasColumnType("float");

                    b.Property<double?>("size")
                        .HasColumnType("float");

                    b.Property<string>("sleep")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("speciality")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("systolicBloodPressure")
                        .HasColumnType("float");

                    b.Property<double?>("temperature")
                        .HasColumnType("float");

                    b.Property<string>("thirst")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ticket_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("totalCholesterol")
                        .HasColumnType("float");

                    b.Property<string>("urine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("weight")
                        .HasColumnType("float");

                    b.Property<string>("weightEvolution")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("ticket_id");

                    b.ToTable("triage", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.upload", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("date");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("path")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("upload", "registroclinico");
                });

            modelBuilder.Entity("Data.DataModels.user", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("cellphone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("country_id")
                        .HasColumnType("bigint");

                    b.Property<string>("createdBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("createdDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("deletable")
                        .HasColumnType("bit");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("department_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("district_id")
                        .HasColumnType("bigint");

                    b.Property<string>("documentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("documentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("lastNameFather")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("lastNameMother")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("maritalStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("modifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("modifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("organDonor")
                        .HasColumnType("bit");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("province_id")
                        .HasColumnType("bigint");

                    b.Property<Guid>("reset_token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<long?>("role_id")
                        .HasColumnType("bigint");

                    b.Property<string>("sex")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("since")
                        .HasColumnType("date");

                    b.Property<Guid>("token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("country_id");

                    b.HasIndex("department_id");

                    b.HasIndex("district_id");

                    b.HasIndex("role_id");

                    b.ToTable("users", "registroclinico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.DataModels.cardiovascularnote", b =>
                {
                    b.HasOne("Data.DataModels.note", "note")
                        .WithMany("cardiovascularnotes")
                        .HasForeignKey("note_id")
                        .HasConstraintName("FK_cardiovascularnote_note");

                    b.Navigation("note");
                });

            modelBuilder.Entity("Data.DataModels.cardiovascularnote_cardiovascularsymptom", b =>
                {
                    b.HasOne("Data.DataModels.cardiovascularnote", "cardiovascularNote")
                        .WithMany("cardiovascularnote_cardiovascularsymptoms")
                        .HasForeignKey("cardiovascularNote_id")
                        .HasConstraintName("FK_cardiovascularnote_cardiovascularsymptoms_cardiovascularnote")
                        .IsRequired();

                    b.Navigation("cardiovascularNote");
                });

            modelBuilder.Entity("Data.DataModels.department", b =>
                {
                    b.HasOne("Data.DataModels.country", "country")
                        .WithMany("departments")
                        .HasForeignKey("country_id")
                        .HasConstraintName("department$FK43w9v6odn5ebkcotastqgn1dw")
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("Data.DataModels.diagnosis", b =>
                {
                    b.HasOne("Data.DataModels.chapter", "chapter")
                        .WithMany("diagnoses")
                        .HasForeignKey("chapter_id")
                        .HasConstraintName("diagnosis$FKdkejwjwwrvhod7ilsu9u62d4r")
                        .IsRequired();

                    b.Navigation("chapter");
                });

            modelBuilder.Entity("Data.DataModels.district", b =>
                {
                    b.HasOne("Data.DataModels.province", "province")
                        .WithMany("districts")
                        .HasForeignKey("province_id")
                        .HasConstraintName("district$FKft8pluvn8a75sbmt3bn3o11ph")
                        .IsRequired();

                    b.Navigation("province");
                });

            modelBuilder.Entity("Data.DataModels.lab", b =>
                {
                    b.HasOne("Data.DataModels.user", "user")
                        .WithMany("labs")
                        .HasForeignKey("user_id")
                        .HasConstraintName("user->labs")
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.DataModels.lab_upload_result", b =>
                {
                    b.HasOne("Data.DataModels.lab", "lab")
                        .WithMany("lab_upload_results")
                        .HasForeignKey("lab_id")
                        .HasConstraintName("lab->lab_upload_result");

                    b.HasOne("Data.DataModels.medic", "medic_user")
                        .WithMany("lab_upload_results")
                        .HasForeignKey("medic_user_id")
                        .HasConstraintName("medic->lab_upload_result");

                    b.HasOne("Data.DataModels.user", "user")
                        .WithMany("lab_upload_results")
                        .HasForeignKey("user_id")
                        .HasConstraintName("user->lab_upload_result")
                        .IsRequired();

                    b.Navigation("lab");

                    b.Navigation("medic_user");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.DataModels.medic", b =>
                {
                    b.HasOne("Data.DataModels.user", "user")
                        .WithOne("medic")
                        .HasForeignKey("Data.DataModels.medic", "id")
                        .HasConstraintName("medic$FKa63sueb7mgdy1vvoejcxsafil")
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.DataModels.medic_specialty", b =>
                {
                    b.HasOne("Data.DataModels.medic", "Medic")
                        .WithOne("medic_specialty")
                        .HasForeignKey("Data.DataModels.medic_specialty", "Medic_id")
                        .HasConstraintName("medic_specialties$FKgyco417bacd28ti07gdpxwvsr")
                        .IsRequired();

                    b.Navigation("Medic");
                });

            modelBuilder.Entity("Data.DataModels.note", b =>
                {
                    b.HasOne("Data.DataModels.establishment", "establishment")
                        .WithMany("notes")
                        .HasForeignKey("establishment_id")
                        .HasConstraintName("FK_note_establishment");

                    b.HasOne("Data.DataModels.medic", "medic")
                        .WithMany("notes")
                        .HasForeignKey("medic_id")
                        .HasConstraintName("FK_note_medic");

                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("notes")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_note_patient")
                        .IsRequired();

                    b.HasOne("Data.DataModels.ticket", "ticket")
                        .WithMany("notes")
                        .HasForeignKey("ticket_id")
                        .HasConstraintName("FK_note_ticket");

                    b.HasOne("Data.DataModels.triage", "triage")
                        .WithMany("notes")
                        .HasForeignKey("triage_id")
                        .HasConstraintName("FK_note_triage");

                    b.HasOne("Data.DataModels.user", "user")
                        .WithMany("notes")
                        .HasForeignKey("user_id")
                        .HasConstraintName("FK_note_users");

                    b.Navigation("establishment");

                    b.Navigation("medic");

                    b.Navigation("patient");

                    b.Navigation("ticket");

                    b.Navigation("triage");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.DataModels.notediagnosis", b =>
                {
                    b.HasOne("Data.DataModels.diagnosis", "diagnosis")
                        .WithMany("notediagnoses")
                        .HasForeignKey("diagnosis_id")
                        .HasConstraintName("FK_notediagnosis_diagnosis");

                    b.HasOne("Data.DataModels.note", "note")
                        .WithMany("notediagnoses")
                        .HasForeignKey("note_id")
                        .HasConstraintName("FK_notediagnosis_note");

                    b.Navigation("diagnosis");

                    b.Navigation("note");
                });

            modelBuilder.Entity("Data.DataModels.noteexam", b =>
                {
                    b.HasOne("Data.DataModels.exam", "exam")
                        .WithMany("noteexams")
                        .HasForeignKey("exam_id")
                        .HasConstraintName("FK_noteexam_exam")
                        .IsRequired();

                    b.HasOne("Data.DataModels.note", "note")
                        .WithMany("noteexams")
                        .HasForeignKey("note_id")
                        .HasConstraintName("FK_noteexam_note")
                        .IsRequired();

                    b.Navigation("exam");

                    b.Navigation("note");
                });

            modelBuilder.Entity("Data.DataModels.noteexam_upload", b =>
                {
                    b.HasOne("Data.DataModels.noteexam", "noteExam")
                        .WithMany("noteexam_uploads")
                        .HasForeignKey("noteExam_id")
                        .HasConstraintName("FK_noteexam_upload_noteexam");

                    b.HasOne("Data.DataModels.upload", "uploads")
                        .WithOne("noteexam_upload")
                        .HasForeignKey("Data.DataModels.noteexam_upload", "uploads_id")
                        .HasConstraintName("FK_noteexam_upload_upload");

                    b.Navigation("noteExam");

                    b.Navigation("uploads");
                });

            modelBuilder.Entity("Data.DataModels.notemedicine", b =>
                {
                    b.HasOne("Data.DataModels.medicine", "medicine")
                        .WithMany("notemedicines")
                        .HasForeignKey("medicine_id")
                        .HasConstraintName("FK_notemedicine_medicine");

                    b.HasOne("Data.DataModels.note", "note")
                        .WithMany("notemedicines")
                        .HasForeignKey("note_id")
                        .HasConstraintName("FK_notemedicine_note");

                    b.Navigation("medicine");

                    b.Navigation("note");
                });

            modelBuilder.Entity("Data.DataModels.notereferral", b =>
                {
                    b.HasOne("Data.DataModels.note", "note")
                        .WithMany("notereferrals")
                        .HasForeignKey("note_id")
                        .HasConstraintName("FK_notereferral_note");

                    b.Navigation("note");
                });

            modelBuilder.Entity("Data.DataModels.nurse", b =>
                {
                    b.HasOne("Data.DataModels.user", "idNavigation")
                        .WithOne("nurse")
                        .HasForeignKey("Data.DataModels.nurse", "id")
                        .HasConstraintName("nurse$FKinc1dd4o81eetpkv731etxb34")
                        .IsRequired();

                    b.Navigation("idNavigation");
                });

            modelBuilder.Entity("Data.DataModels.nurse_specialty", b =>
                {
                    b.HasOne("Data.DataModels.nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Nurse_id")
                        .HasConstraintName("nurse_specialties$FK6nc16jusxlaag0qyhvwjs89fk")
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Data.DataModels.patient", b =>
                {
                    b.HasOne("Data.DataModels.department", "department")
                        .WithMany("patients")
                        .HasForeignKey("departmentId")
                        .HasConstraintName("FK_patient_department")
                        .IsRequired();

                    b.HasOne("Data.DataModels.user", "user")
                        .WithMany("patients")
                        .HasForeignKey("user_id")
                        .HasConstraintName("user->patients")
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.DataModels.patient_allergy", b =>
                {
                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_allergies")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_patient_allergies_patient")
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Data.DataModels.patient_fatherbackground", b =>
                {
                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_fatherbackgrounds")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_patient_fatherbackgrounds_patient")
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Data.DataModels.patient_medic_permission", b =>
                {
                    b.HasOne("Data.DataModels.medic", "medic")
                        .WithMany("patient_medic_permissions")
                        .HasForeignKey("medic_id")
                        .HasConstraintName("medic_$FKgyco417bacd28ti07gdpxwvsr")
                        .IsRequired();

                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_medic_permissions")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("patient_$FKgyco417bacd28ti07gdpxwvsr")
                        .IsRequired();

                    b.Navigation("medic");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Data.DataModels.patient_medicine", b =>
                {
                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_medicines")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_patient_medicines_patient")
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Data.DataModels.patient_motherbackground", b =>
                {
                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_motherbackgrounds")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_patient_motherbackgrounds_patient")
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Data.DataModels.patient_personalbackground", b =>
                {
                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_personalbackgrounds")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_patient_personalbackgrounds_patient")
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Data.DataModels.patient_symptom", b =>
                {
                    b.HasOne("Data.DataModels.patient", "patient")
                        .WithMany("patient_symptoms")
                        .HasForeignKey("patient_id")
                        .HasConstraintName("FK_patient_symptoms_patient")
                        .IsRequired();

                    b.HasOne("Data.DataModels.symptom", "symptoms")
                        .WithMany("patient_symptoms")
                        .HasForeignKey("symptoms_id")
                        .HasConstraintName("FK_patient_symptoms_symptoms");

                    b.Navigation("patient");

                    b.Navigation("symptoms");
                });

            modelBuilder.Entity("Data.DataModels.province", b =>
                {
                    b.HasOne("Data.DataModels.department", "department")
                        .WithMany("provinces")
                        .HasForeignKey("department_id")
                        .HasConstraintName("province$FK3joxh8ppnjhvvt1485efkpxm8")
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("Data.DataModels.role_permission", b =>
                {
                    b.HasOne("Data.DataModels.role", "Role")
                        .WithMany()
                        .HasForeignKey("Role_id")
                        .HasConstraintName("role_permissions$FKr5u91l7q7yikdobgi0lhntse6")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.DataModels.triage", b =>
                {
                    b.HasOne("Data.DataModels.ticket", "ticket")
                        .WithMany("triages")
                        .HasForeignKey("ticket_id")
                        .HasConstraintName("ticket -> triage");

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Data.DataModels.user", b =>
                {
                    b.HasOne("Data.DataModels.country", "country")
                        .WithMany("users")
                        .HasForeignKey("country_id")
                        .HasConstraintName("users$FK1eit3dhanvh8r59sd30a3vyaw")
                        .IsRequired();

                    b.HasOne("Data.DataModels.department", "department")
                        .WithMany("users")
                        .HasForeignKey("department_id")
                        .HasConstraintName("FK_users_department");

                    b.HasOne("Data.DataModels.district", "district")
                        .WithMany("users")
                        .HasForeignKey("district_id")
                        .HasConstraintName("users$FKdoiykqja8oxn78j7gf3l536ta");

                    b.HasOne("Data.DataModels.role", "role")
                        .WithMany("users")
                        .HasForeignKey("role_id")
                        .HasConstraintName("users$FKiod6nq5d7gqshxljomqccs7tp");

                    b.Navigation("country");

                    b.Navigation("department");

                    b.Navigation("district");

                    b.Navigation("role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Data.DataModels.role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Data.DataModels.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Data.DataModels.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Data.DataModels.role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.DataModels.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Data.DataModels.user", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.DataModels.cardiovascularnote", b =>
                {
                    b.Navigation("cardiovascularnote_cardiovascularsymptoms");
                });

            modelBuilder.Entity("Data.DataModels.chapter", b =>
                {
                    b.Navigation("diagnoses");
                });

            modelBuilder.Entity("Data.DataModels.country", b =>
                {
                    b.Navigation("departments");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Data.DataModels.department", b =>
                {
                    b.Navigation("patients");

                    b.Navigation("provinces");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Data.DataModels.diagnosis", b =>
                {
                    b.Navigation("notediagnoses");
                });

            modelBuilder.Entity("Data.DataModels.district", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("Data.DataModels.establishment", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("Data.DataModels.exam", b =>
                {
                    b.Navigation("noteexams");
                });

            modelBuilder.Entity("Data.DataModels.lab", b =>
                {
                    b.Navigation("lab_upload_results");
                });

            modelBuilder.Entity("Data.DataModels.medic", b =>
                {
                    b.Navigation("lab_upload_results");

                    b.Navigation("medic_specialty");

                    b.Navigation("notes");

                    b.Navigation("patient_medic_permissions");
                });

            modelBuilder.Entity("Data.DataModels.medicine", b =>
                {
                    b.Navigation("notemedicines");
                });

            modelBuilder.Entity("Data.DataModels.note", b =>
                {
                    b.Navigation("cardiovascularnotes");

                    b.Navigation("notediagnoses");

                    b.Navigation("noteexams");

                    b.Navigation("notemedicines");

                    b.Navigation("notereferrals");
                });

            modelBuilder.Entity("Data.DataModels.noteexam", b =>
                {
                    b.Navigation("noteexam_uploads");
                });

            modelBuilder.Entity("Data.DataModels.patient", b =>
                {
                    b.Navigation("notes");

                    b.Navigation("patient_allergies");

                    b.Navigation("patient_fatherbackgrounds");

                    b.Navigation("patient_medic_permissions");

                    b.Navigation("patient_medicines");

                    b.Navigation("patient_motherbackgrounds");

                    b.Navigation("patient_personalbackgrounds");

                    b.Navigation("patient_symptoms");
                });

            modelBuilder.Entity("Data.DataModels.province", b =>
                {
                    b.Navigation("districts");
                });

            modelBuilder.Entity("Data.DataModels.role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("Data.DataModels.symptom", b =>
                {
                    b.Navigation("patient_symptoms");
                });

            modelBuilder.Entity("Data.DataModels.ticket", b =>
                {
                    b.Navigation("notes");

                    b.Navigation("triages");
                });

            modelBuilder.Entity("Data.DataModels.triage", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("Data.DataModels.upload", b =>
                {
                    b.Navigation("noteexam_upload");
                });

            modelBuilder.Entity("Data.DataModels.user", b =>
                {
                    b.Navigation("lab_upload_results");

                    b.Navigation("labs");

                    b.Navigation("medic");

                    b.Navigation("notes");

                    b.Navigation("nurse");

                    b.Navigation("patients");
                });
#pragma warning restore 612, 618
        }
    }
}
